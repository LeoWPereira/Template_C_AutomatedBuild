apply plugin: 'c'
apply plugin: 'maven-publish'

group = 'com.agres.isopad'
version = '0.0.1'

model {
	buildTypes {
        Debug
        Release
    }
    
	platforms {
		"stm32f7xx-arm" {
            architecture "arm"
        }		
	}
    
    toolChains {
		gcc(Gcc) {
	  		target('stm32f7xx-arm') {
				def prefix = ""
				cCompiler.executable         = prefix + cCompiler.executable
				cppCompiler.executable       = prefix + cppCompiler.executable
				assembler.executable         = prefix + assembler.executable
				linker.executable            = prefix + linker.executable
				staticLibArchiver.executable = prefix + staticLibArchiver.executable
            		}
		}
	}
	
    components {
//        teste(NativeLibrarySpec) {
//			targetPlatform "arm"
//		}

		all {
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
            }
			
			sources {
				c {
					source {
						srcDir "src"
						include "**/*.c"
					}
					exportedHeaders {
						srcDir "src"
					}
				}
			}
        }
    }
}

														/////////////
														/// TASKS ///
														/////////////

task CleanTerminal(type: Exec) {
	commandLine 'clear'
	
	doLast 
	{
        println '\t\t\t\t\t\t\t\t\t******************** IsoPad **********************'
    }
}

task CleanHostProject(dependsOn: CleanTerminal, type: Exec) {
	workingDir 'Debug'

  	commandLine 'make', 'clean'
}

task BuildProjectForHost(dependsOn: CleanHostProject, type: Exec) {
	workingDir 'Debug'

  	commandLine 'make'
}

task RemoveCeedlingTestFiles(dependsOn: BuildProjectForHost, type: Exec) { 
	workingDir 'test_ceedling/build'
	
  	commandLine 'rm', '-r', 'test'
}

task CreateCeedlingTestFolder(dependsOn: RemoveCeedlingTestFiles, type: Exec) { 
	workingDir 'test_ceedling/build'
	
  	commandLine 'mkdir', 'test'
}

task CopyObjectFilesToCeedling(dependsOn: CreateCeedlingTestFolder, type: Exec) { 
  	commandLine 'cp', '-r', 'Debug/src/.', 'test_ceedling/build/test/out'
}

task PerformUnitTestHarnessOnHost(dependsOn: CopyObjectFilesToCeedling, type: Exec) { 
	workingDir 'test_ceedling'

  	commandLine 'ceedling', 'test:all'
}

task CleanTargetProject(dependsOn: PerformUnitTestHarnessOnHost, type: Exec) { 
	workingDir 'Release'

  	commandLine 'make', 'clean'
}

task BuildProjectForTarget(dependsOn: CleanTargetProject, type: Exec) { 
	workingDir 'Release'

  	commandLine 'make'
}

task GenerateDocumentation(dependsOn: BuildProjectForTarget, type: Exec) { 
	commandLine 'doxygen'
}

task RemovePossibleSymbolicLink(dependsOn: GenerateDocumentation, type: Exec) { 
	workingDir 'Documentation/Doxygen'
	
	commandLine 'rm', 'index.html'
}

task CreateSymbolicLink(dependsOn: RemovePossibleSymbolicLink, type: Exec) { 
	workingDir 'Documentation/Doxygen'
	
	commandLine 'ln', '-s', 'html/index.html', 'index.html'
}

task AutomatedBuild(dependsOn: CreateSymbolicLink, type: Zip) {
	destinationDir = file('Out')
	
	baseName = 'TESTE'
	version = project.version
	extension = 'zip'

	into('Debug') {
	    from fileTree(dir: 'Debug/', 	include: '*.elf')
	    from fileTree(dir: 'Debug/', 	include: '*.hex')
	    from fileTree(dir: 'Debug/', 	include: '*.bin')
	    from fileTree(dir: 'Debug/', 	include: '*.a')
	    from fileTree(dir: 'Debug/', 	include: '*.so')
	}
	
	into('Release') { 
		from fileTree(dir: 'Release/', 	include: '*.elf')
	    from fileTree(dir: 'Release/', 	include: '*.hex')
	    from fileTree(dir: 'Release/', 	include: '*.bin')
	    from fileTree(dir: 'Release/', 	include: '*.a')
	    from fileTree(dir: 'Release/', 	include: '*.so')
	}
	
	into('Documentation') { 
		into('html') {
			from fileTree(dir: 'Documentation/Doxygen/html', 	include: '*.*')
		}
		
		from fileTree(dir: 'Documentation/Doxygen', 		include: 'index.html')
	}
	
	doLast {
        println '\n********** Output file successfully created! **********'
    }
}
